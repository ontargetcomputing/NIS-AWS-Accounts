name: Run Terraformer Import

on:
  workflow_dispatch: 
    inputs:
      worspace_path:
        description: 'The path to the workspace to import into'
        required: true
        type: choice
        options:
          - 'Please choose a workspace'
          - accounts/SBOX-9394/baseline/baseline-workspace
          - TODO
        default: 'Please choose a workspace'
      resources:
        description: 'resources - see https://github.com/GoogleCloudPlatform/terraformer'
        required: true
        type: choice
        options:
          - 'Plase choose a resource to import'
          - vpc
          - ec2
        default: 'Plase choose a resource to import'
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-west-2'

# This is necessary for GitHub to request the OIDC token
permissions:
  id-token: write  # Required for OIDC
  contents: read

jobs:
  terraformer_on_import_label:
    runs-on: ubuntu-latest

    steps:
      - name: Run only when 'import' label is added to PR targeting main
        run: echo "The 'import' label has been added to a pull request targeting the main branch."

        # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up AWS credentials (if using AWS)
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-2 


      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::582983609964:role/github-actions-oidc-role
          aws-region: us-west-2



      # Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8 0TC-i$-the-best
          
      # Install Terraformer
      - name: Install Terraformer
        run: |
          wget https://github.com/GoogleCloudPlatform/terraformer/releases/download/0.8.24/terraformer-all-linux-amd64
          chmod +x terraformer-all-linux-amd64
          sudo mv terraformer-all-linux-amd64 /usr/local/bin/terraformer

      # Run terraform init to setup
      - name: Run terraform init
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          terraform init

      - name: test out
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          aws s3 ls

      # Run Terraformer to generate the terraformer plan
      - name: Run Terraformer to generate plan
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          echo "Running in the plan in ${{ github.event.inputs.worspace_path }}"
          terraformer plan aws --resources=${{ github.event.inputs.resources }} --regions=${{ github.event.inputs.aws_region }}

      # Run Terraformer to generate the terraformer plan
      - name: Show Plan
        working-directory: ${{ github.event.inputs.worspace_path }}
        run: |
          cat generated/aws/terraformer/plan.json
      



      # Step 4: Run Terraformer to generate Terraform configuration
          # terraformer import aws --resources=vpc,subnet,ec2 --regions=us-west-1 \
          # --profile=default --filter="Name=vpc_id;Value=vpc-12345"
      # - name: Run Terraformer to generate AWS infrastructure as code
      #   run: |
      #     terraformer import aws --resources=ec2 --regions=us-west-2 




      # Step 5: Commit and push generated Terraform files back to the repository
      # - name: Commit and push changes
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .
      #     git commit -m "Add Terraform configurations from Terraformer"
      #     git push origin main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
